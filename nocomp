local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Rayfield Example Window",
    LoadingTitle = "Rayfield Interface Suite",
    LoadingSubtitle = "by Sirius",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
    Discord = {
       Enabled = false,
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided",
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })


 local Tab = Window:CreateTab("Tab Example", 4483362458) -- Title, Image
 local Section = Tab:CreateSection("Section Example")


 Rayfield:Notify({
    Title = "Notification Title",
    Content = "Notification Content",
    Duration = 6.5,
    Image = 4483362458,
    Actions = { -- Notification Buttons
       Ignore = {
          Name = "Okay!",
          Callback = function()
          print("The user tapped Okay!")
       end
    },
 },
 })

 local Button = Tab:CreateButton({
    Name = "Button Example",
    Callback = function()
    -- The function that takes place when the button is pressed
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Toggle Example",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        if (not game:IsLoaded()) then game.Loaded:Wait() end -- game loaded sanity check >~<

--\\ Services
local Players      = game:GetService('Players');
local RunService   = game:GetService('RunService');
local Workspace    = game:GetService('Workspace');
local Storage      = game:GetService('ReplicatedStorage');
local InputService = game:GetService('UserInputService');

--\\ Variables
local Client = Players.LocalPlayer;
local Camera = Workspace.CurrentCamera;
local Remote = Storage:FindFirstChild('MainEvent');

local Target;

--\\ Table & Modules
local Settings = {Enabled = true, FoV = {Visible = true, Size = 200}};

local DrawingCircle = Drawing.new('Circle'); do
    DrawingCircle.Visible = Settings.FoV.Visible
    DrawingCircle.Radius  = Settings.FoV.Size
    DrawingCircle.Color   = Color3.fromRGB(255, 0, 0)
    DrawingCircle.Filled  = false
end

--\\ Functions
local function UpdateFoV()
    DrawingCircle.Visible  = Settings.FoV.Visible
    DrawingCircle.Radius   = Settings.FoV.Size
    DrawingCircle.Position = InputService:GetMouseLocation()
end

local function GetClosestPlayer(Radius)
    local Distance, Player = Radius

    for Index, Value in pairs(Players:GetPlayers()) do
        if (Value == Client) then continue end

        local Character = Value.Character
        local RootPart  = Character and Character:FindFirstChild('HumanoidRootPart')

        if (not RootPart) then continue end

        local Position, OnScreen = Camera:WorldToViewportPoint(RootPart.Position)
        local Magnitude = (Vector2.new(Position.X, Position.Y) - InputService:GetMouseLocation()).Magnitude

        if Magnitude > Distance then continue end

        if OnScreen then
            Distance = Magnitude
            Player = Value
        end
    end

    return Player
end

local function RenderStepped()
    UpdateFoV()
    Target = GetClosestPlayer(Settings.FoV.Size)
end

--\\ Connections
RunService.RenderStepped:Connect(RenderStepped)

--\\ Hooks
local namecall; namecall = hookmetamethod(game, '__namecall', function(self, ...)
    local Arguments, Method = {...}, getnamecallmethod()

    if (not checkcaller() and Settings.Enabled and Target and Method == 'FireServer' and self == Remote and Arguments[1] == 'UpdateMousePos') then 
        Arguments[2] = Target.Character.HumanoidRootPart.Position + (Target.Character.HumanoidRootPart.Velocity * 0.129)
        return namecall(self, unpack(Arguments))
    end

    return namecall(self, ...)
end)
 })
